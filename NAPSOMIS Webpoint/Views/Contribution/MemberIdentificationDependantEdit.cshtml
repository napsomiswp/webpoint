@model NAPSOMIS_Webpoint.Models.nom_mst
@using NAPSOMIS_Webpoint.ViewModels
@using NAPSOMIS_Webpoint.Models;

@{
    ViewBag.Title = "Dependant Edit";
}

 
<div class="col-md-1" style="background-color:white; font-size:small;">
    <br />
    <img src="~/Content/Images/view_pim_contacts.png" style="width:60px; height:50px; padding-left:10px;" />

</div>

<div class="col-md-11" style="background-color:white; font-size:small;">
    <br />
    <text style="color:midnightblue; padding-left:10px; font-size:large;"> Dependants for S.S. No: @TempData.Peek("SSNo").ToString() </text>
    <br />
    <text style="font-size:small; padding-left:10px;">Please fill in all required information below</text>


    <br />

</div>
<script type="text/javascript">

    function OnRelationSelectedIndexChanged(s, e) {
        var relationvalue = frelation.GetText().split(";");
        if (relationvalue[1].toString().trim() == "SON") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "DAUGHTER") fnomsex.SetText("Female")
        if (relationvalue[1].toString().trim() == "SISTER") fnomsex.SetText("Female")
        if (relationvalue[1].toString().trim() == "BROTHER") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "MOTHER") fnomsex.SetText("Female")
        if (relationvalue[1].toString().trim() == "FATHER") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "NIECE") fnomsex.SetText("Female")
        if (relationvalue[1].toString().trim() == "NEPHEW") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "AUNTIE") fnomsex.SetText("Female")
        if (relationvalue[1].toString().trim() == "UNCLE") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "GRAND SON") fnomsex.SetText("Male")
        if (relationvalue[1].toString().trim() == "GRAND DAUGHTER") fnomsex.SetText("Female")

    }
</script>

@using (Html.BeginForm("EditDependants", "CaptureRegistrationForms", FormMethod.Post))
    {

    @Html.AntiForgeryToken()
    @Html.DevExpress().FormLayout(s =>
{
    s.Name = "CaptureMemberDependants";
    s.ColCount = 3;

    s.Items.AddTabbedGroupItem(group =>
    {
        group.ColSpan = 3;

        group.Items.AddGroupItem(sb =>
        {
            sb.Caption = "Edit Member Dependants";
            sb.Name = "firsttab";
            sb.ColSpan = 3;
            sb.ColCount = 3;

            sb.Items.Add(m => m.ID_SBTS).NestedExtension().TextBox(b =>
            {
                b.Name = "ID_SBTS";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.AddEmptyItem();
            sb.Items.AddEmptyItem();

            sb.Items.Add(m => m.fref_no).NestedExtension().TextBox(b =>
            {
                b.Name = "fref_no";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.fnom_ssno).NestedExtension().TextBox(b => {

                b.Name = "fnom_ssno";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;

            });

            sb.Items.AddEmptyItem();

            sb.Items.Add(m => m.fnsurname).NestedExtension().TextBox(b =>
            {
                b.Name = "fnsurname";
                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fnfirstname.Focus();}";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.fnfirstnam).NestedExtension().TextBox(b =>
            {
                b.Name = "fnfirstnam";
                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fnothname.Focus();}";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.fnothname).NestedExtension().TextBox(b =>
            {
                b.Name = "fnothname";
                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fnomsex.Focus();}";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.frelation).NestedExtension().ComboBox(b =>
            {
                b.Name = "frelation";

                List<PDCTemplate> myrelations = (List<PDCTemplate>)TempData.Peek("MyRelations");

                b.Properties.Columns.Add("Code", "Code", Unit.Pixel(50));
                b.Properties.Columns.Add("Name", "Name", Unit.Pixel(200));

                b.Properties.DataSource = myrelations;
                b.Properties.TextField = "Name";
                b.Properties.ValueField = "Code";
                b.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;

                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fper_addr.Focus();}";
                b.Properties.ClientSideEvents.SelectedIndexChanged = "OnRelationSelectedIndexChanged";
                b.ReadOnly = true; b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.fnomsex).NestedExtension().ComboBox(b =>
            {
                b.Name = "fnomsex";
                b.Properties.Items.Add("Male", "M");
                b.Properties.Items.Add("Female", "F");
                b.Properties.IncrementalFilteringMode = IncrementalFilteringMode.StartsWith;
                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fbirth_date.Focus();}";
                b.ReadOnly = true;
                b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.Add(m => m.fbirth_dat).NestedExtension().DateEdit(b =>
            {
                b.Name = "fbirth_dat";
                b.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)frelation.Focus();}";
                b.ReadOnly = true;
                b.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });


            sb.Items.Add(m => m.fper_addr).NestedExtension().Memo(mem =>
            {
                mem.Name = "fper_addr";
                mem.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)fres_addr.Focus();}";
                mem.Properties.ClientSideEvents.TextChanged = "function(s,e){fres_addr.SetText(fper_addr.GetText());}";
                mem.ReadOnly = true;
                mem.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });


            sb.Items.Add(m => m.fres_addr).NestedExtension().Memo(mem =>
            {
                mem.Name = "fres_addr";
                mem.Properties.ClientSideEvents.KeyDown = "function(s,e){if(ASPxClientUtils.GetKeyCode(e.htmlEvent) == 13)cmdsave.DoClick();}";
                mem.ReadOnly = true; mem.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            sb.Items.AddEmptyItem();


            sb.Items.Add(b =>
            {
                b.Caption = "";

                b.NestedExtension().Button(btn =>
                {
                    btn.Name = "clear";
                    btn.Text = "Go to Member Identifiction";
                    btn.UseSubmitBehavior = false;
                    btn.Width = Unit.Pixel(120);
                    btn.RouteValues = new { Controller = "Contribution", Action = "MemberIdentification", ParamValue = "" };

                });
            });

        });



    });


}).GetHtml()

    }
  

<div class="col-md-1" style="background-color:white; font-size:small;">
    <br />
    
</div>

<div class="col-md-11" style="background-color:white; font-size:small;">
    <br />

    @Html.DevExpress().RoundPanel(settings =>
{
    settings.Name = "savedependantlist";
    settings.HeaderText = "Cached Dependants";

    settings.SetContent(() =>
    {

        try
            {


            NAPSOMISModel db = new NAPSOMISModel();

            List<nom_mst> dep = new List<nom_mst>();

            string refno = TempData.Peek("MemberEditReferenceNo").ToString();
            dep = db.nom_mst.Where(d => d.fref_no == refno).ToList();

            IEnumerable<nom_mst> thenom = (IEnumerable<nom_mst>)dep;

            if (dep.Count() > 0)
                {
                Html.RenderPartial("MemberIDDependantList", thenom);
                }

            }
        catch (Exception ex)
            {
            throw;
            }



    });
}).GetHtml()




</div>





