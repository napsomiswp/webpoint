@model NAPSOMIS_Webpoint.ViewModels.ListInvalidNumbersbyCategoryViewModel

@using NAPSOMIS_Webpoint.ViewModels
@using NAPSOMIS_Webpoint.Models

@{
    ViewBag.Title = "List of Invalid Numbers by Category";
}
<br />

<div class="col-md-1" style="background-color:white; font-size:small;">
    <br />
    <img src="~/Content/Images/document_open_8.png" width:60px; height:50px; padding-left:10px;" />
    <br />
</div>

<div class="col-md-10" style="background-color:white; font-size:small;">

    <text style="color:midnightblue; padding-left:10px; font-size:large;"> List of Invalid Numbers by Category </text>
    <br />
    <text style="font-size:small; padding-left:10px;">Produce list of invalid numbers by using the form below</text>
    <br />
</div>


<script type="text/javascript">
    function SelectedIndexChanged(s, e) {

        var thetype = ListBy.GetText();

        if (thetype == "Period") {

            //periodgroup.SetVisible(true);

        } else {

            //BeginPeriod.readOnly(true);
            //BeginPeriod.SetText("")

        }
    }

</script>


@using (Html.BeginForm("ListInvalidNumbersByCategory_OK", "Contribution", FormMethod.Post))
    {

    @Html.AntiForgeryToken()
    @Html.DevExpress().FormLayout(setting =>
{
    setting.Name = "receivecrlayout";
    setting.ColCount = 2;

    if (ViewBag.Message != null)
        {
        setting.Items.Add(b =>
        {
            b.ShowCaption = DefaultBoolean.False;
            b.Name = "MessageGroup";

            b.NestedExtension().Label(lb =>
            {
                lb.Name = "lblmessage";
                lb.Text = ViewBag.Message;
                lb.ControlStyle.ForeColor = System.Drawing.Color.Red;
            });

        });

        setting.Items.AddEmptyItem();

        }

    setting.Items.AddGroupItem(group =>
    {
        group.Name = "firstgroup";
        group.Caption = "Basic Search Criteria";
        group.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        group.ColSpan = 2;
        group.ColCount = 2;

        group.Items.Add(m => m.ListBy).NestedExtension().ComboBox(b =>
        {

            b.Name = "ListBy";
            b.Properties.Items.Add("Category", "Category");
            b.Properties.Items.Add("Name", "Name");
            b.Properties.Items.Add("Staff Number", "Staff Number");

            b.Properties.EnableClientSideAPI = true;
            b.Properties.ClientSideEvents.SelectedIndexChanged = "SelectedIndexChanged";

        });

        group.Items.AddEmptyItem();

        group.Items.Add(b => b.ferno).NestedExtension().TextBox(c =>
        {
            c.Name = "ferno";

        });

        group.Items.Add(bt =>
        {
            bt.Name = "btloadssno";
            bt.ShowCaption = DefaultBoolean.True;
            bt.Caption = "";

            bt.NestedExtension().Button(b =>
            {
                b.Name = "cmdloadernodata";
                b.Width = Unit.Pixel(100);
                b.Text = "Load";
                b.RouteValues = new { Controller = "Contribution", Action = "ListInvalidNumbersByCategory_LoadERNo" };
                b.UseSubmitBehavior = true;

            });

        });

        group.Items.Add(b => b.EstablishmentName).NestedExtension().TextBox(c =>
        {
            c.Name = "EstablishmentName";
            c.ReadOnly = true;
            c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
        });


        
    });


    setting.Items.AddGroupItem(group =>
    {
        group.Name = "periodgroup";
        group.Caption = "By Period";
        group.GroupBoxDecoration = GroupBoxDecoration.Box;
        group.ColSpan = 2;
        group.ColCount = 2;

        group.Items.Add(b => b.fcat).NestedExtension().ComboBox(b =>
        {

            b.Name = "fcat";

            List<PDCTemplate> myprovinces = (List<PDCTemplate>)TempData.Peek("MyEmployerCategories");

            b.Properties.Columns.Add("Code", "Code", Unit.Pixel(50));
            b.Properties.Columns.Add("Name", "Name", Unit.Pixel(200));

            b.Properties.DataSource = myprovinces;
            b.Properties.TextField = "Name";
            b.Properties.ValueField = "Code";

        });

        group.Items.Add(b => b.BeginPeriod).NestedExtension().TextBox(c =>
        {
            c.Name = "BeginPeriod";
         
        });



    });


    setting.Items.AddGroupItem(group =>
    {
        group.Name = "staffgroup";
        group.Caption = "By Staff Number";
        group.GroupBoxDecoration = GroupBoxDecoration.Box;
        group.ColSpan = 2;
        group.ColCount = 2;

        group.Items.Add(b => b.StaffNumber).NestedExtension().TextBox(c =>
        {
            c.Name = "StaffNumber";
            //c.ReadOnly = true;
            //c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;

        });

    });

    setting.Items.AddGroupItem(group =>
    {
        group.Name = "namegroup";
        group.Caption = "By Name";
        group.GroupBoxDecoration = GroupBoxDecoration.Box;
        group.ColSpan = 2;
        group.ColCount = 2;

        group.Items.Add(b => b.fsurname).NestedExtension().TextBox(c =>
        {
            c.Name = "fsurname";

        });

        group.Items.Add(b => b.firstname).NestedExtension().TextBox(c =>
        {
            c.Name = "firstname";

        });

        group.Items.Add(b => b.fothername).NestedExtension().TextBox(c =>
        {
            c.Name = "fothername";

        });

    });

    setting.Items.AddGroupItem(group =>
    {

        group.Name = "buttongroup";
        group.Caption = "Actions";
        group.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
        group.ColSpan = 2;
        group.ColCount = 2;


        group.Items.Add(bt =>
        {
            bt.Name = "btgroup";
            bt.ShowCaption = DefaultBoolean.False;

            bt.NestedExtension().Button(b =>
            {
                b.Name = "cmdreset";
                b.Width = Unit.Pixel(100);
                b.Text = "Start New Entry";
                b.RouteValues = new { Controller = "Contribution", Action = "ListInvalidNumbersByCategory" };
                b.UseSubmitBehavior = false;

            });

        });


        group.Items.Add(bt =>
        {
            bt.Name = "btgroup";
            bt.ShowCaption = DefaultBoolean.True;
            bt.Caption = "";

            bt.NestedExtension().Button(b =>
            {
                b.Name = "cmdcomplete";
                b.Width = Unit.Pixel(100);
                b.Text = "Accept";
                b.RouteValues = new { Controller = "Contribution", Action = "ListInvalidNumbersByCategory_OK" };
                b.UseSubmitBehavior = true;

            });

        });

    });

}).GetHtml()


    }
