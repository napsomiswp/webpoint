@model NAPSOMIS_Webpoint.ViewModels.AccountPaymentViewModel

@using NAPSOMIS_Webpoint.ViewModels
@using NAPSOMIS_Webpoint.Models

@{
    ViewBag.Title = "Payment Journal Capture";
}
<div class="col-md-1" style="background-color:white; font-size:small;">
    <br />
    <img src="~/Content/Images/kspread-3.png" style="width:70px; height:60px; padding-left:10px;" />
    <br />
</div>

<div class="col-md-10" style="background-color:white; font-size:small;">
    <br />
    <text style="color:midnightblue; padding-left:10px; font-size:large;"> Payment Journal Capture </text>
    <br />
    <text style="font-size:small; padding-left:10px;">Please fill the form below prior to processing the request</text>
    <br />
    <br />

</div>


<script type="text/javascript">
    function SetTab() {

        SetActiveTabByIndexIncrement();

    }
</script>


<script type="text/javascript">

    window.setTimeout("SetTab()", 1);

    function SetActiveTabByIndexIncrement() {
        var theindex = '@Html.Raw(Model.TabIndex)';
        tablayout.SetActiveTab(tablayout.GetTab(theindex));
    }

</script>


@using (Html.BeginForm("ManualPayments_OK", "AccountPayment", FormMethod.Post))
    {

    @Html.AntiForgeryToken()
    @Html.DevExpress().FormLayout(setting =>
{
    setting.Name = "receivecrlayout";
    setting.ColCount = 3;

    if (ViewBag.Message != null)
        {
        setting.Items.Add(b =>
        {
            b.ShowCaption = DefaultBoolean.False;
            b.Name = "MessageGroup";

            b.NestedExtension().Label(lb =>
            {
                lb.Name = "lblmessage";
                lb.Text = ViewBag.Message;
                lb.ControlStyle.ForeColor = System.Drawing.Color.Red;
            });

        });

        setting.Items.AddEmptyItem();

        }

    setting.Items.AddTabbedGroupItem(tab =>
    {
        tab.Name = "tablayout";
        tab.Caption = "Manual Receipt Capture";
        tab.ColSpan = 3;

        tab.Items.AddGroupItem(group =>
        {
            group.Name = "cashgroup";
            group.Caption = "Cash";
            group.GroupBoxDecoration = GroupBoxDecoration.HeadingLine;
            group.ColSpan = 3;
            group.ColCount = 3;


            group.Items.Add(b => b.cashLostCard).NestedExtension().CheckBox(c =>
            {
                c.Name = "cashLostCard";

            });

            group.Items.AddEmptyItem();
            group.Items.AddEmptyItem();

            group.Items.Add(b => b.cashERNO).NestedExtension().TextBox(c =>
            {
                c.Name = "cashERNO";

            });

            group.Items.Add(b => b.cashestablishment).NestedExtension().TextBox(c =>
            {
                c.Name = "cashestablishment";
                c.ReadOnly = true;
                c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;

            });

            group.Items.Add(bt =>
            {
                bt.Name = "btloaderno";
                bt.ShowCaption = DefaultBoolean.True;
                bt.Caption = "";

                bt.NestedExtension().Button(b =>
                {
                    b.Name = "cmdernodata";
                    b.Width = Unit.Pixel(100);
                    b.Text = "Load";
                    b.RouteValues = new { Controller = "AccountPayment", Action = "CashPayments_LoadERNo" };
                    b.UseSubmitBehavior = true;

                });

            });




            group.Items.Add(b => b.cashssno).NestedExtension().TextBox(c =>
            {
                c.Name = "cashssno";
                c.ReadOnly = true;
                c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            group.Items.Add(b => b.cashmembername).NestedExtension().TextBox(c =>
            {
                c.Name = "cashmembername";
                c.ReadOnly = true;
                c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
            });

            //group.Items.Add(bt =>
            //{
            //    bt.Name = "btloadssno";
            //    bt.ShowCaption = DefaultBoolean.True;
            //    bt.Caption = "";

            //    bt.NestedExtension().Button(b =>
            //    {
            //        b.Name = "cmdssnodata";
            //        b.Width = Unit.Pixel(100);
            //        b.Text = "Load";
            //        b.RouteValues = new { Controller = "AccountPayment", Action = "CashPayments_LoadSSNo" };
            //        b.UseSubmitBehavior = true;

            //    });

            //});

            group.Items.AddEmptyItem();

            group.Items.AddEmptyItem();

            group.Items.AddGroupItem(group2 =>
            {
                group2.Name = "secondgroup";
                group2.Caption = "Receipt and Payment Details";
                group2.GroupBoxDecoration = GroupBoxDecoration.Box;
                group2.ColSpan = 3;
                group2.ColCount = 3;

                group2.Items.Add(b => b.cashreceiptno).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashreceiptno";

                });

                group2.Items.Add(b => b.cashreceiptdate).NestedExtension().DateEdit(c =>
                {
                    c.Name = "cashreceiptdate";

                });

                group2.Items.Add(m => m.cashdistcode).NestedExtension().ComboBox(b =>
                {
                    b.Name = "cashdistcode";

                    if (TempData.Peek("MyAreaOffices") != null)
                        {
                        List<PDCTemplate> myoffices = (List<PDCTemplate>)TempData.Peek("MyAreaOffices");

                        b.Properties.Columns.Add("Code", "Code", Unit.Pixel(50));
                        b.Properties.Columns.Add("Name", "Name", Unit.Pixel(200));

                        b.Properties.DataSource = myoffices;
                        b.Properties.TextField = "Name";
                        b.Properties.ValueField = "Code";
                        }

                });

                group2.Items.Add(b => b.cashtotalamount).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashtotalamount";

                    if (TempData.Peek("Balance") != null)
                        {

                        c.ReadOnly = true;
                        c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;

                        }
                });

            });


            group.Items.AddGroupItem(group2 =>
            {
                group2.Name = "furthergroup";
                group2.Caption = "Further Specifications";
                group2.GroupBoxDecoration = GroupBoxDecoration.Box;
                group2.ColSpan = 3;
                group2.ColCount = 3;


                group2.Items.Add(m => m.cashtype).NestedExtension().ComboBox(b =>
                {
                    b.Name = "cashtype";

                    if (TempData.Peek("MyAreaOffices") != null)
                        {
                        List<PDCTemplate> myoffices = (List<PDCTemplate>)TempData.Peek("MyPaymentTypes");

                        b.Properties.Columns.Add("Code", "Code", Unit.Pixel(50));
                        b.Properties.Columns.Add("Name", "Name", Unit.Pixel(200));

                        b.Properties.DataSource = myoffices;
                        b.Properties.TextField = "Name";
                        b.Properties.ValueField = "Code";
                        }

                });

                group2.Items.AddEmptyItem();
                group2.Items.AddEmptyItem();

                group2.Items.Add(b => b.cashfrom).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashfrom";

                });

                group2.Items.Add(b => b.cashto).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashto";
                    c.ReadOnly = true;
                    c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;
                });

                group2.Items.AddEmptyItem();


                group2.Items.Add(b => b.cashamount).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashamount";

                });

                group2.Items.Add(b => b.cashlabourforce).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashlabourforce";

                });


                group2.Items.Add(bt =>
                {
                    bt.Name = "btok";
                    bt.ShowCaption = DefaultBoolean.True;
                    bt.Caption = "";

                    bt.NestedExtension().Button(b =>
                    {
                        b.Name = "cmdok";
                        b.Width = Unit.Pixel(100);
                        b.Text = "OK";
                        b.RouteValues = new { Controller = "AccountPayment", Action = "CashPayments_OK" };
                        b.UseSubmitBehavior = true;

                        if (Model.cashbalance == 0)
                            {
                            b.Enabled = false;
                            }
                        else
                            {
                            b.Enabled = true;
                            }

                    });

                });

            });


            group.Items.AddGroupItem(group2 =>
            {
                group2.Name = "calculationgroup";
                group2.Caption = "";
                group2.GroupBoxDecoration = GroupBoxDecoration.Box;
                group2.ColSpan = 1;
                group2.ColCount = 1;

                group2.Items.Add(b => b.cashcummulated).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashcummulated";
                    c.ReadOnly = true;
                    c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGray;

                });

                group2.Items.Add(b => b.cashbalance).NestedExtension().TextBox(c =>
                {
                    c.Name = "cashbalance";
                    c.ReadOnly = true;
                    c.Properties.ReadOnlyStyle.BackColor = System.Drawing.Color.LightGreen;

                });

            });


            group.Items.Add(b =>
            {
                b.Name = "breakdowngridview";
                b.Caption = "";
                b.ShowCaption = DefaultBoolean.False;

                b.SetNestedContent(() =>
                {

                    if (TempData.Peek("PaymentJournalBreakdowns") != null)
                        {

                        List<CashPaymentBreakdownViewModel> plist = (List<CashPaymentBreakdownViewModel>)TempData.Peek("PaymentJournalBreakdowns");
                        IEnumerable<CashPaymentBreakdownViewModel> penum = (IEnumerable<CashPaymentBreakdownViewModel>)plist;
                        @Html.RenderPartial("CashPaymentBreakdownList", penum);

                        }

                });

            });

            group.Items.AddGroupItem(group2 =>
            {

                group2.Name = "buttongroup";
                group2.Caption = "Actions";
                group2.GroupBoxDecoration = GroupBoxDecoration.Box;
                group2.ColSpan = 2;
                group2.ColCount = 2;

                group2.Items.Add(bt =>
                {
                    bt.Name = "btgroup";
                    bt.ShowCaption = DefaultBoolean.False;

                    bt.NestedExtension().Button(b =>
                    {
                        b.Name = "cmdreset";
                        b.Width = Unit.Pixel(100);
                        b.Text = "Clear";
                        b.RouteValues = new { Controller = "AccountPayment", Action = "ManualPayments" };
                        b.UseSubmitBehavior = false;

                    });

                });


                group2.Items.Add(bt =>
                {
                    bt.Name = "btgroup";
                    bt.ShowCaption = DefaultBoolean.True;
                    bt.Caption = "";

                    bt.NestedExtension().Button(b =>
                    {
                        b.Name = "cmdcomplete";
                        b.Width = Unit.Pixel(100);
                        b.Text = "Accept";
                        b.RouteValues = new { Controller = "AccountPayment", Action = "CashPayments_Accept" };
                        b.UseSubmitBehavior = true;

                        if (Model.cashbalance == 0 && Model.cashcummulated > 0)
                            {
                            b.Enabled = true;
                            }
                        else
                            {
                            b.Enabled = false;
                            }
                    });

                });

            });



        });
 

    });




}).GetHtml()


    }
